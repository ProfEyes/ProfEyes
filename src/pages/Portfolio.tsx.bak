import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, AreaChart, Area } from 'recharts';
import { motion, AnimatePresence, useAnimation } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { Slider } from "@/components/ui/slider";
import { 
  ArrowUpIcon, 
  ArrowDownIcon, 
  TrendingUpIcon, 
  TrendingDownIcon, 
  DollarSign as DollarSignIcon,
  PercentIcon, 
  BarChartIcon, 
  PieChartIcon, 
  SettingsIcon,
  Target,
  Clock,
  Shield,
  Wallet,
  ChartBar,
  Settings2,
  CheckCircle2,
  AlertCircle,
  Sparkles,
  Bitcoin,
  Globe,
  Loader2
} from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import Layout from "@/components/Layout";
import { generateOptimalPortfolio } from '@/services/portfolioOptimizer';
import { toast } from "@/components/ui/use-toast";
import { Toaster } from "@/components/ui/toaster";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';

interface Asset {
  symbol: string;
  quantity: number;
  averagePrice: number;
  currentPrice: number;
  type: string;
}

interface PortfolioData {
  totalValue: number;
  assets: Asset[];
  performance: {
    date: string;
    value: number;
  }[];
  allocation: {
    name: string;
    value: number;
  }[];
}

interface SavedPortfolio extends PortfolioData {
  id: string;
  name: string;
  createdAt: Date;
  riskLevel: string;
}

interface FormData {
  riskLevel: 'BAIXO' | 'MÉDIO' | 'ALTO';
  initialAmount: number;
  cryptoAllocation: number;
  stocksAllocation: number;
  rebalanceFrequency: 'DIÁRIO' | 'SEMANAL' | 'MENSAL' | 'TRIMESTRAL';
  preferredAssets: string[];
  investmentGoal: string;
  investmentTerm: number;
  maxDrawdown: number;
  reinvestDividends: boolean;
}

interface RealTimeData {
  btcPrice: number;
  btc24hChange: number;
  ethPrice: number;
  eth24hChange: number;
  globalMarketCap: number;
}

// Dados de exemplo
const mockPortfolioData: PortfolioData = {
  totalValue: 15750.25,
  assets: [
    { symbol: 'BTC', quantity: 0.25, averagePrice: 45000, currentPrice: 47000, type: 'CRIPTO' },
    { symbol: 'ETH', quantity: 2.5, averagePrice: 2800, currentPrice: 3000, type: 'CRIPTO' },
    { symbol: 'BNB', quantity: 10, averagePrice: 300, currentPrice: 320, type: 'CRIPTO' },
  ],
  performance: [
    { date: '2024-01', value: 14000 },
    { date: '2024-02', value: 14500 },
    { date: '2024-03', value: 15750.25 },
  ],
  allocation: [
    { name: 'BTC', value: 11750 },
    { name: 'ETH', value: 7500 },
    { name: 'BNB', value: 3200 },
  ],
};

const COLORS = [
  '#22c55e', // Verde
  '#3b82f6', // Azul
  '#f59e0b', // Amarelo
  '#ec4899', // Rosa
  '#8b5cf6', // Roxo
  '#06b6d4', // Ciano
];

const getRiskColor = (risk: string) => {
  switch (risk.toUpperCase()) {
    case 'BAIXO':
      return 'text-emerald-500';
    case 'MÉDIO':
      return 'text-blue-500';
    case 'ALTO':
      return 'text-rose-500';
    default:
      return 'text-gray-500';
  }
};

const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(value);
};

export default function Portfolio() {
  const [activePortfolio, setActivePortfolio] = useState<PortfolioData | null>(null);
  const [selectedPortfolio, setSelectedPortfolio] = useState<SavedPortfolio | null>(null);
  const [savedPortfolios, setSavedPortfolios] = useState<SavedPortfolio[]>([]);
  const [showNameInput, setShowNameInput] = useState(false);
  const [portfolioName, setPortfolioName] = useState('');
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    riskLevel: 'MÉDIO',
    initialAmount: 10000,
    cryptoAllocation: 30,
    stocksAllocation: 40,
    rebalanceFrequency: 'MENSAL',
    preferredAssets: [],
    investmentGoal: '',
    investmentTerm: 5,
    maxDrawdown: 15,
    reinvestDividends: true
  });
  const [step, setStep] = useState(1);
  const [realTimeData, setRealTimeData] = useState<RealTimeData>({
    btcPrice: 0,
    btc24hChange: 0,
    ethPrice: 0,
    eth24hChange: 0,
    globalMarketCap: 0
  });

  const handleGeneratePortfolio = async () => {
    setLoading(true);
    try {
      // Validar dados do formulário
      if (formData.initialAmount < 1000) {
        throw new Error('O valor inicial deve ser de pelo menos R$ 1.000');
      }

      if (formData.stocksAllocation + formData.cryptoAllocation > 100) {
        throw new Error('A soma das alocações não pode ultrapassar 100%');
      }

      // Gerar carteira otimizada
      const portfolio = await generateOptimalPortfolio(
        formData.riskLevel,
        formData.initialAmount,
        formData.stocksAllocation,
        formData.cryptoAllocation,
        formData.investmentTerm,
        formData.preferredAssets
      );

      // Converter o resultado para o formato esperado pelo componente
      const convertedPortfolio: PortfolioData = {
        totalValue: formData.initialAmount,
        assets: portfolio.assets.map(asset => ({
          symbol: asset.symbol,
          quantity: Math.floor((formData.initialAmount * asset.weight) / asset.price),
          averagePrice: asset.price,
          currentPrice: asset.price,
          type: asset.type
        })),
        performance: [
          { date: '2024-01', value: formData.initialAmount },
          { date: '2024-02', value: formData.initialAmount * (1 + portfolio.expectedReturn / 12) },
          { date: '2024-03', value: formData.initialAmount * (1 + portfolio.expectedReturn / 6) }
        ],
        allocation: portfolio.assets.map(asset => ({
          name: asset.symbol,
          value: formData.initialAmount * asset.weight
        }))
      };

      setActivePortfolio(convertedPortfolio);
      setShowNameInput(true); // Mostrar modal para nomear a carteira

      // Mostrar mensagem de sucesso
      toast({
        title: "Carteira gerada com sucesso!",
        description: "Agora você pode nomear e salvar sua carteira.",
        duration: 5000,
      });

    } catch (error) {
      console.error('Erro ao gerar carteira:', error);
      // Mostrar mensagem de erro
      toast({
        title: "Erro ao gerar carteira",
        description: error instanceof Error ? error.message : "Ocorreu um erro ao gerar a carteira",
        variant: "destructive",
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  };

  const getRiskGlow = (risk: string) => {
    switch (risk) {
      case 'BAIXO':
        return 'shadow-emerald-500/50';
      case 'MÉDIO':
        return 'shadow-blue-500/50';
      case 'ALTO':
        return 'shadow-rose-500/50';
      default:
        return 'shadow-gray-500/50';
    }
  };

  const getStepProgress = () => ((step / 3) * 100);

  // Efeito para simular atualização de dados em tempo real
  useEffect(() => {
    const fetchRealTimeData = async () => {
      try {
        const btcPrice = 65000; // Exemplo de preço do Bitcoin
        const btc24hChange = 2.5;
        const ethPrice = 3500;
        const eth24hChange = 1.8;
        const circulatingSupply = 19600000; // Aproximadamente o supply atual do Bitcoin
        const globalMarketCap = Number(btcPrice) * circulatingSupply;

        setRealTimeData({
          btcPrice,
          btc24hChange,
          ethPrice,
          eth24hChange,
          globalMarketCap
        });
      } catch (error) {
        console.error('Erro ao buscar dados em tempo real:', error);
      }
    };

    fetchRealTimeData();
    const interval = setInterval(fetchRealTimeData, 5000);
    return () => clearInterval(interval);
  }, []);

  const handleSavePortfolio = () => {
    if (!activePortfolio || !portfolioName) return;

    const newPortfolio: SavedPortfolio = {
      ...activePortfolio,
      id: Date.now().toString(),
      name: portfolioName,
      createdAt: new Date(),
      riskLevel: formData.riskLevel
    };

    setSavedPortfolios([...savedPortfolios, newPortfolio]);
    setShowNameInput(false);
    setPortfolioName('');
    
    toast({
      title: "Carteira salva com sucesso!",
      description: `A carteira "${portfolioName}" foi salva.`,
      duration: 5000,
    });
  };

  const handleDeletePortfolio = (id: string) => {
    setSavedPortfolios(prev => prev.filter(p => p.id !== id));
    setSelectedPortfolio(null);
    toast({
      title: "Carteira excluída",
      description: "A carteira foi excluída com sucesso.",
      duration: 5000,
    });
  };

  return (
    <>
    <Layout>
        <div className="container mx-auto px-4 py-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-8"
          >
            <div className="flex items-center justify-between mb-6">
              <div>
                <h1 className="text-3xl font-bold text-gradient">Meu Portfólio</h1>
                <p className="text-muted-foreground mt-1">
                  Gerencie e acompanhe seus investimentos
                </p>
              </div>
              {selectedPortfolio && (
                <Badge variant="outline" className={cn("px-4 py-2", getRiskColor(selectedPortfolio.riskLevel))}>
                  Perfil {selectedPortfolio.riskLevel}
                </Badge>
              )}
            </div>

            <Tabs defaultValue="manage" className="space-y-4">
              <TabsList className="bg-background/50 backdrop-blur-sm w-full justify-start">
                <TabsTrigger value="manage" className="data-[state=active]:bg-primary/20">
                  <Wallet className="w-4 h-4 mr-2" />
                  Minhas Carteiras
                </TabsTrigger>
                <TabsTrigger value="generate" className="data-[state=active]:bg-primary/20">
                  <BarChartIcon className="w-4 h-4 mr-2" />
                  Gerar Carteira
                </TabsTrigger>
              </TabsList>

              <TabsContent value="manage">
                {selectedPortfolio ? (
                  <div className="space-y-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setSelectedPortfolio(null)}
                        >
                          ← Voltar
                        </Button>
                        <h2 className="text-2xl font-bold">{selectedPortfolio.name}</h2>
                      </div>
                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={() => handleDeletePortfolio(selectedPortfolio.id)}
                      >
                        Excluir Carteira
                      </Button>
                    </div>

                    <Tabs defaultValue="overview" className="space-y-4">
                      <TabsList className="bg-background/50 backdrop-blur-sm">
                        <TabsTrigger value="overview">
                          <PieChartIcon className="w-4 h-4 mr-2" />
                          Visão Geral
                        </TabsTrigger>
                        <TabsTrigger value="assets">
                          <DollarSignIcon className="w-4 h-4 mr-2" />
                          Ativos
                        </TabsTrigger>
                        <TabsTrigger value="performance">
                          <TrendingUpIcon className="w-4 h-4 mr-2" />
                          Performance
                        </TabsTrigger>
                      </TabsList>

                      <TabsContent value="overview">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                            <CardHeader className="pb-2">
                              <CardTitle className="flex items-center text-lg">
                                <DollarSignIcon className="h-4 w-4 mr-2 text-primary" />
                                Valor Total
                              </CardTitle>
                            </CardHeader>
                            <CardContent>
                              <div className="flex items-baseline">
                                <span className="text-3xl font-bold text-primary">
                                  {formatCurrency(selectedPortfolio.totalValue)}
                                </span>
                                <Badge variant="outline" className="ml-2 bg-emerald-500/10 text-emerald-500">
                                  +5.2%
                                </Badge>
                              </div>
                              <p className="text-sm text-muted-foreground mt-1">
                                Desde o início
                              </p>
                            </CardContent>
                          </Card>

                          <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                            <CardHeader className="pb-2">
                              <CardTitle className="flex items-center text-lg">
                                <BarChartIcon className="h-4 w-4 mr-2 text-primary" />
                                Ativos
                              </CardTitle>
                            </CardHeader>
                            <CardContent>
                              <div className="flex items-baseline">
                                <span className="text-3xl font-bold text-primary">
                                  {selectedPortfolio.assets.length}
                                </span>
                                <span className="text-sm text-muted-foreground ml-2">
                                  tipos diferentes
                                </span>
                              </div>
                              <p className="text-sm text-muted-foreground mt-1">
                                Diversificação ideal
                              </p>
                            </CardContent>
                          </Card>

                          <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                            <CardHeader className="pb-2">
                              <CardTitle className="flex items-center text-lg">
                                <PercentIcon className="h-4 w-4 mr-2 text-primary" />
                                Retorno 24h
                              </CardTitle>
                            </CardHeader>
                            <CardContent>
                              <div className="flex items-baseline">
                                <span className="text-3xl font-bold text-emerald-500">
                                  +2.5%
                                </span>
                                <span className="text-sm text-emerald-500/80 ml-2">
                                  ↑ R$ 387,25
                                </span>
                              </div>
                              <p className="text-sm text-muted-foreground mt-1">
                                Últimas 24 horas
                              </p>
                            </CardContent>
                          </Card>
                        </div>
                      </TabsContent>

                      <TabsContent value="assets">
                        <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                          <CardHeader>
                            <div className="flex items-center justify-between">
                              <div>
                                <CardTitle>Meus Ativos</CardTitle>
                                <CardDescription>
                                  Detalhamento de todos os ativos da carteira
                                </CardDescription>
                              </div>
                              <Button variant="outline" size="sm">
                                Exportar
                              </Button>
                            </div>
                          </CardHeader>
                          <CardContent>
                            <div className="space-y-4">
                              {selectedPortfolio.assets.map((asset, index) => (
                                <motion.div
                                  key={asset.symbol}
                                  initial={{ opacity: 0, x: -20 }}
                                  animate={{ opacity: 1, x: 0 }}
                                  transition={{ delay: index * 0.1 }}
                                  className="flex items-center justify-between p-4 rounded-lg bg-background/50 backdrop-blur-sm hover:bg-background/70 transition-colors"
                                >
                                  <div className="flex items-center space-x-4">
                                    <div className={cn(
                                      "w-10 h-10 rounded-full flex items-center justify-center",
                                      asset.currentPrice > asset.averagePrice
                                        ? "bg-emerald-500/10"
                                        : "bg-rose-500/10"
                                    )}>
                                      {asset.currentPrice > asset.averagePrice ? (
                                        <TrendingUpIcon className="h-5 w-5 text-emerald-500" />
                                      ) : (
                                        <TrendingDownIcon className="h-5 w-5 text-rose-500" />
                                      )}
                                    </div>
                                    <div>
                                      <h3 className="font-bold flex items-center">
                                        {asset.symbol}
                                        <Badge variant="outline" className="ml-2 text-xs">
                                          {asset.type}
                                        </Badge>
                                      </h3>
                                      <div className="space-y-1">
                                        <p className="text-sm text-muted-foreground">
                                          Quantidade: {asset.quantity}
                                        </p>
                                        <p className="text-sm text-muted-foreground">
                                          Preço Médio: {formatCurrency(asset.averagePrice)}
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                  <div className="text-right">
                                    <p className="font-bold">
                                      {formatCurrency(asset.quantity * asset.currentPrice)}
                                    </p>
                                    <div className="flex items-center justify-end space-x-2">
                                      <Badge 
                                        variant="outline" 
                                        className={cn(
                                          "text-xs",
                                          asset.currentPrice > asset.averagePrice
                                            ? "bg-emerald-500/10 text-emerald-500"
                                            : "bg-rose-500/10 text-rose-500"
                                        )}
                                      >
                                        {asset.currentPrice > asset.averagePrice ? "+" : ""}
                                        {((asset.currentPrice - asset.averagePrice) / asset.averagePrice * 100).toFixed(2)}%
                                      </Badge>
                                      <p className="text-sm text-muted-foreground">
                                        {formatCurrency(asset.currentPrice)}
                                      </p>
                                    </div>
                                  </div>
                                </motion.div>
                              ))}
                            </div>
                          </CardContent>
                        </Card>
                      </TabsContent>

                      <TabsContent value="performance">
                        <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                          <CardHeader>
                            <div className="flex items-center justify-between">
                              <div>
                                <CardTitle>Análise de Performance</CardTitle>
                                <CardDescription>
                                  Acompanhamento detalhado do desempenho
                                </CardDescription>
                              </div>
                              <div className="flex space-x-2">
                                <Button variant="outline" size="sm">1M</Button>
                                <Button variant="outline" size="sm">3M</Button>
                                <Button variant="outline" size="sm" className="bg-primary/10">6M</Button>
                                <Button variant="outline" size="sm">1A</Button>
                                <Button variant="outline" size="sm">Tudo</Button>
                              </div>
                            </div>
                          </CardHeader>
                          <CardContent>
                            <div className="h-[400px]">
                              <ResponsiveContainer width="100%" height="100%">
                                <AreaChart data={selectedPortfolio.performance}>
                                  <defs>
                                    <linearGradient id="colorPerformance" x1="0" y1="0" x2="0" y2="1">
                                      <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.3}/>
                                      <stop offset="95%" stopColor="#3b82f6" stopOpacity={0}/>
                                    </linearGradient>
                                  </defs>
                                  <CartesianGrid strokeDasharray="3 3" opacity={0.1} />
                                  <XAxis 
                                    dataKey="date" 
                                    stroke="#666"
                                    tick={{ fill: '#666' }}
                                  />
                                  <YAxis 
                                    stroke="#666"
                                    tick={{ fill: '#666' }}
                                    tickFormatter={(value) => formatCurrency(value)}
                                  />
                                  <Tooltip
                                    content={({ payload, label }) => {
                                      if (payload && payload.length) {
                                        const currentValue = Number(payload[0].value);
                                        const previousValue = Number(selectedPortfolio.performance[0].value);
                                        const percentChange = ((currentValue - previousValue) / previousValue * 100).toFixed(2);
                                        
                                        return (
                                          <div className="bg-background/95 p-3 rounded-lg border shadow-lg">
                                            <p className="font-medium">{label}</p>
                                            <p className="text-sm text-primary mt-1">
                                              {formatCurrency(currentValue)}
                                            </p>
                                            <p className={cn(
                                              "text-xs mt-1",
                                              Number(percentChange) >= 0 ? "text-emerald-500" : "text-rose-500"
                                            )}>
                                              {Number(percentChange) >= 0 ? "+" : ""}{percentChange}%
                                            </p>
                                          </div>
                                        );
                                      }
                                      return null;
                                    }}
                                  />
                                  <Area
                                    type="monotone"
                                    dataKey="value"
                                    stroke="#3b82f6"
                                    strokeWidth={2}
                                    fill="url(#colorPerformance)"
                                  />
                                </AreaChart>
                              </ResponsiveContainer>
                            </div>
                          </CardContent>
                        </Card>
                      </TabsContent>
                    </Tabs>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {savedPortfolios.length === 0 ? (
                      <div className="col-span-full text-center py-12">
                        <p className="text-muted-foreground">
                          Você ainda não tem carteiras salvas.
                        </p>
                      </div>
                    ) : (
                      savedPortfolios.map((portfolio) => (
                        <Card
                          key={portfolio.id}
                          className="cursor-pointer hover:shadow-lg transition-shadow"
                          onClick={() => setSelectedPortfolio(portfolio)}
                        >
                          <CardHeader>
                            <CardTitle>{portfolio.name}</CardTitle>
                            <CardDescription>
                              Criada em {portfolio.createdAt.toLocaleDateString()}
                            </CardDescription>
                          </CardHeader>
                          <CardContent>
                            <div className="flex justify-between items-center">
                              <Badge variant="outline" className={cn(getRiskColor(portfolio.riskLevel))}>
                                {portfolio.riskLevel}
                              </Badge>
                              <p className="text-lg font-semibold">
                                {formatCurrency(portfolio.totalValue)}
                              </p>
                            </div>
                          </CardContent>
                        </Card>
                      ))
                    )}
                  </div>
                )}
              </TabsContent>

              <TabsContent value="generate">
      <div className="space-y-8">
                  <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                    <CardHeader>
                      <CardTitle>Gerar Nova Carteira</CardTitle>
                      <CardDescription>
                        Defina os parâmetros para gerar uma carteira otimizada
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-6">
                        <div>
                          <h3 className="text-lg font-semibold mb-4">Perfil de Risco</h3>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <motion.div
                              whileHover={{ scale: 1.02 }}
                              whileTap={{ scale: 0.98 }}
                              className={cn(
                                "relative cursor-pointer rounded-lg border p-4 hover:border-primary transition-colors",
                                formData.riskLevel === 'BAIXO' && "border-emerald-500 shadow-lg shadow-emerald-500/20"
                              )}
                              onClick={() => setFormData({ ...formData, riskLevel: 'BAIXO' })}
                            >
                              <div className="flex items-center justify-between">
                                <div className="space-y-1">
                                  <p className="font-medium">Conservador</p>
                                  <p className="text-sm text-muted-foreground">
                                    Baixo risco, retornos estáveis
                                  </p>
                                </div>
                                <Badge variant="outline" className="text-emerald-500">
                                  BAIXO
                                </Badge>
                              </div>
                            </motion.div>

                            <motion.div
                              whileHover={{ scale: 1.02 }}
                              whileTap={{ scale: 0.98 }}
                              className={cn(
                                "relative cursor-pointer rounded-lg border p-4 hover:border-primary transition-colors",
                                formData.riskLevel === 'MÉDIO' && "border-blue-500 shadow-lg shadow-blue-500/20"
                              )}
                              onClick={() => setFormData({ ...formData, riskLevel: 'MÉDIO' })}
                            >
                              <div className="flex items-center justify-between">
                                <div className="space-y-1">
                                  <p className="font-medium">Moderado</p>
                                  <p className="text-sm text-muted-foreground">
                                    Equilíbrio entre risco e retorno
                                  </p>
                                </div>
                                <Badge variant="outline" className="text-blue-500">
                                  MÉDIO
                                </Badge>
                              </div>
                            </motion.div>

                            <motion.div
                              whileHover={{ scale: 1.02 }}
                              whileTap={{ scale: 0.98 }}
                              className={cn(
                                "relative cursor-pointer rounded-lg border p-4 hover:border-primary transition-colors",
                                formData.riskLevel === 'ALTO' && "border-rose-500 shadow-lg shadow-rose-500/20"
                              )}
                              onClick={() => setFormData({ ...formData, riskLevel: 'ALTO' })}
                            >
                              <div className="flex items-center justify-between">
                                <div className="space-y-1">
                                  <p className="font-medium">Arrojado</p>
                                  <p className="text-sm text-muted-foreground">
                                    Alto risco, maiores retornos
                                  </p>
                                </div>
                                <Badge variant="outline" className="text-rose-500">
                                  ALTO
                                </Badge>
                              </div>
                            </motion.div>
                          </div>
                        </div>

                        <div className="relative">
                          <div className="flex items-center justify-between mb-4">
        <div>
                              <h2 className="text-3xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
                                Geração de Carteira Inteligente
                              </h2>
                              <p className="text-muted-foreground mt-2 text-lg">
                                Configure os parâmetros para gerar uma carteira otimizada baseada em IA
                              </p>
                            </div>
                            <div className="flex flex-col items-end">
                              <div className="flex items-center space-x-2 mb-2">
                                {[1, 2, 3].map((i) => (
                                  <motion.div
                                    key={i}
                                    initial={{ scale: 0.8 }}
                                    animate={{ 
                                      scale: step === i ? 1.1 : 0.8,
                                      opacity: step === i ? 1 : 0.5
                                    }}
                                    className={cn(
                                      "w-4 h-4 rounded-full transition-colors flex items-center justify-center",
                                      step === i ? "bg-primary" : "bg-muted",
                                      step > i ? "bg-primary/50" : ""
                                    )}
                                  >
                                    {step > i && <CheckCircle2 className="w-3 h-3 text-white" />}
                                  </motion.div>
                                ))}
                              </div>
                              <Progress value={getStepProgress()} className="w-[200px]" />
                            </div>
                          </div>

                          <div className="absolute -top-4 left-0 w-full h-[2px] bg-gradient-to-r from-primary/0 via-primary/50 to-primary/0" />
        </div>

                        <AnimatePresence mode="wait">
                          {step === 1 && (
                            <motion.div
                              key="step1"
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              exit={{ opacity: 0, y: -20 }}
                              className="grid grid-cols-1 md:grid-cols-2 gap-8"
                            >
                              <div className="space-y-6">
                                <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                                  <div className="absolute top-0 right-0 w-32 h-32 bg-primary/5 rounded-full -translate-y-16 translate-x-16" />
            <CardHeader>
                                    <CardTitle className="flex items-center text-xl">
                                      <Shield className="w-5 h-5 mr-2 text-primary" />
                                      Perfil de Risco
                                    </CardTitle>
              <CardDescription>
                                      Escolha o perfil que melhor se adequa aos seus objetivos
              </CardDescription>
            </CardHeader>
            <CardContent>
                  <RadioGroup
                    value={formData.riskLevel}
                                      onValueChange={(value: 'BAIXO' | 'MÉDIO' | 'ALTO') => 
                                        setFormData(prev => ({ ...prev, riskLevel: value }))}
                                      className="grid grid-cols-1 gap-4"
                                    >
                                      {[
                                        { 
                                          value: 'BAIXO', 
                                          label: 'Conservador', 
                                          description: 'Menor risco, retornos mais estáveis', 
                                          icon: <TrendingDownIcon className="w-5 h-5 text-emerald-500" />,
                                          details: 'Foco em renda fixa e ativos de baixa volatilidade',
                                          color: 'emerald'
                                        },
                                        { 
                                          value: 'MÉDIO', 
                                          label: 'Moderado', 
                                          description: 'Equilíbrio entre risco e retorno', 
                                          icon: <TrendingUpIcon className="w-5 h-5 text-blue-500" />,
                                          details: 'Mix diversificado entre renda fixa e variável',
                                          color: 'blue'
                                        },
                                        { 
                                          value: 'ALTO', 
                                          label: 'Arrojado', 
                                          description: 'Maior risco, potencial de maiores retornos', 
                                          icon: <ArrowUpIcon className="w-5 h-5 text-rose-500" />,
                                          details: 'Foco em renda variável e ativos de maior volatilidade',
                                          color: 'rose'
                                        }
                    ].map((option) => (
                                        <motion.div
                        key={option.value}
                        className={cn(
                                            "relative p-6 border-2 rounded-xl cursor-pointer transition-all",
                          formData.riskLevel === option.value
                                              ? `border-${option.color}-500 bg-${option.color}-500/5 shadow-lg ${getRiskGlow(option.value)}`
                            : "border-muted hover:border-primary/50"
                        )}
                                          onClick={() => setFormData(prev => ({ ...prev, riskLevel: option.value as 'BAIXO' | 'MÉDIO' | 'ALTO' }))}
                                          whileHover={{ scale: 1.02 }}
                                          whileTap={{ scale: 0.98 }}
                                          animate={{
                                            scale: formData.riskLevel === option.value ? 1.02 : 1,
                                            transition: { type: "spring", stiffness: 300, damping: 15 }
                                          }}
                                        >
                                          <RadioGroupItem 
                                            value={option.value} 
                                            id={`risk-${option.value}`} 
                                            className="sr-only"
                                          />
                                          <motion.div 
                                            className="space-y-2"
                                            initial={false}
                                            animate={{
                                              opacity: formData.riskLevel === option.value ? 1 : 0.7
                                            }}
                                          >
                                            <div className="flex items-center">
                                              {option.icon}
                                              <span className="ml-2 text-lg font-semibold">
                                                {option.label}
                                              </span>
                        </div>
                                            <p className="text-sm text-muted-foreground">{option.description}</p>
                                            <motion.div 
                                              className={cn(
                                                "mt-2 p-2 rounded-lg text-xs",
                                                `bg-${option.color}-500/10 text-${option.color}-500`
                                              )}
                                              initial={false}
                                              animate={{
                                                scale: formData.riskLevel === option.value ? 1.05 : 1,
                                                opacity: formData.riskLevel === option.value ? 1 : 0.8
                                              }}
                                            >
                                              {option.details}
                                            </motion.div>
                                          </motion.div>
                                          {formData.riskLevel === option.value && (
                                            <motion.div
                                              className={cn(
                                                "absolute -inset-px rounded-xl border-2",
                                                `border-${option.color}-500/50`
                                              )}
                                              initial={{ opacity: 0, scale: 1.1 }}
                                              animate={{ opacity: 1, scale: 1 }}
                                              transition={{ duration: 0.2 }}
                                            />
                                          )}
                                        </motion.div>
                    ))}
                  </RadioGroup>
                                  </CardContent>
                                </Card>
                              </div>

                              <div className="space-y-6">
                                <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                                  <div className="absolute top-0 right-0 w-32 h-32 bg-primary/5 rounded-full -translate-y-16 translate-x-16" />
                                  <CardHeader>
                                    <CardTitle className="flex items-center text-xl">
                                      <Target className="w-5 h-5 mr-2 text-primary" />
                                      Objetivos de Investimento
                                    </CardTitle>
                                    <CardDescription>
                                      Defina suas metas e parâmetros financeiros
                                    </CardDescription>
                                  </CardHeader>
                                  <CardContent className="space-y-6">
                                    <div className="space-y-4">
                                      <Label className="text-base">Objetivo Principal</Label>
                                      <div className="relative">
                                        <Target className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                                        <Input
                                          placeholder="Ex: Aposentadoria, Compra de imóvel, Reserva de emergência"
                                          value={formData.investmentGoal}
                                          onChange={(e) => setFormData(prev => ({ ...prev, investmentGoal: e.target.value }))}
                                          className="pl-10"
                                        />
                                      </div>
                </div>

                <div className="space-y-4">
                                      <div className="flex items-center justify-between">
                                        <Label className="text-base">Valor Inicial</Label>
                                        <span className="text-sm text-muted-foreground">
                                          Mínimo: R$ 1.000
                                        </span>
                                      </div>
                                      <div className="relative">
                                        <Wallet className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    type="number"
                    value={formData.initialAmount}
                    onChange={(e) => setFormData(prev => ({ ...prev, initialAmount: Number(e.target.value) }))}
                    min="1000"
                    step="1000"
                                          className="pl-10 text-lg"
                  />
                                      </div>
                                      <div className="flex justify-between text-sm">
                                        <span className="text-muted-foreground">Valor atual:</span>
                                        <span className="font-medium">R$ {formData.initialAmount.toLocaleString()}</span>
                                      </div>
                </div>

                                    <div className="space-y-4">
                                      <div className="flex items-center justify-between">
                                        <Label className="text-base">Prazo do Investimento</Label>
                                        <span className="text-sm font-medium">
                                          {formData.investmentTerm} {formData.investmentTerm === 1 ? 'ano' : 'anos'}
                                        </span>
                                      </div>
                                      <div className="relative pt-2">
                                        <Slider
                                          value={[formData.investmentTerm]}
                                          onValueChange={([value]) => setFormData(prev => ({ ...prev, investmentTerm: value }))}
                                          max={30}
                                          min={1}
                                          step={1}
                                          className="my-4"
                                        />
                                        <div className="flex justify-between text-sm text-muted-foreground mt-2">
                                          <span>Curto prazo</span>
                                          <span>Médio prazo</span>
                                          <span>Longo prazo</span>
                                        </div>
                                      </div>
                                      <div className="flex items-center justify-between text-sm bg-primary/5 p-2 rounded-lg">
                                        <span className="text-muted-foreground">Meta para:</span>
                                        <span className="font-medium">{new Date().getFullYear() + formData.investmentTerm}</span>
                                      </div>
                                    </div>
            </CardContent>
          </Card>
                              </div>
                            </motion.div>
                          )}

                          {step === 2 && (
                            <motion.div
                              key="step2"
                              initial={{ opacity: 0, x: 20 }}
                              animate={{ opacity: 1, x: 0 }}
                              exit={{ opacity: 0, x: -20 }}
                              className="grid grid-cols-1 md:grid-cols-2 gap-6"
                            >
                              <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
              <CardHeader>
                                  <CardTitle className="flex items-center">
                                    <PieChartIcon className="w-4 h-4 mr-2" />
                                    Alocação de Ativos
                </CardTitle>
                <CardDescription>
                                    Configure a distribuição entre classes de ativos
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                                    <div className="space-y-4">
                                      <Label>Alocação em Criptomoedas (%)</Label>
                                      <div className="space-y-2">
                                        <Slider
                                          value={[formData.cryptoAllocation]}
                                          onValueChange={([value]) => setFormData(prev => ({ ...prev, cryptoAllocation: value }))}
                                          max={100}
                                          step={5}
                                        />
                                        <div className="flex justify-between text-sm text-muted-foreground">
                                          <span>{formData.cryptoAllocation}%</span>
                                          <span>{100 - formData.cryptoAllocation}% outros ativos</span>
                                        </div>
                                      </div>
                                    </div>

                                    <div className="space-y-4">
                                      <Label>Alocação em Ações (%)</Label>
                                      <div className="space-y-2">
                                        <Slider
                                          value={[formData.stocksAllocation]}
                                          onValueChange={([value]) => setFormData(prev => ({ ...prev, stocksAllocation: value }))}
                                          max={100}
                                          step={5}
                                        />
                                        <div className="flex justify-between text-sm text-muted-foreground">
                                          <span>{formData.stocksAllocation}%</span>
                                          <span>{100 - formData.stocksAllocation}% outros ativos</span>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                  <div className="p-4 rounded-lg bg-background/50">
                                    <h4 className="font-medium mb-2">Distribuição Sugerida</h4>
                                    <div className="h-[200px]">
                                      <ResponsiveContainer width="100%" height="100%">
                                        <PieChart>
                                          <Pie
                                            data={[
                                              { name: 'Criptomoedas', value: formData.cryptoAllocation },
                                              { name: 'Ações', value: formData.stocksAllocation },
                                              { name: 'Outros', value: 100 - formData.cryptoAllocation - formData.stocksAllocation }
                                            ]}
                                            cx="50%"
                                            cy="50%"
                                            labelLine={false}
                                            outerRadius={80}
                                            fill="#8884d8"
                                            dataKey="value"
                                          >
                                            {COLORS.map((color, index) => (
                                              <Cell key={`cell-${index}`} fill={color} />
                                            ))}
                                          </Pie>
                                          <Tooltip />
                                        </PieChart>
                                      </ResponsiveContainer>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                              <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                                <CardHeader>
                                  <CardTitle className="flex items-center">
                                    <SettingsIcon className="w-4 h-4 mr-2" />
                                    Configurações Avançadas
                                  </CardTitle>
                                  <CardDescription>
                                    Ajuste as configurações detalhadas da carteira
                                  </CardDescription>
                                </CardHeader>
                                <CardContent>
                                  <div className="space-y-6">
                                    <div className="space-y-4">
                                      <Label>Frequência de Rebalanceamento</Label>
                                      <RadioGroup
                                        value={formData.rebalanceFrequency}
                                        onValueChange={(value: 'DIÁRIO' | 'SEMANAL' | 'MENSAL' | 'TRIMESTRAL') => 
                                          setFormData(prev => ({ ...prev, rebalanceFrequency: value }))}
                                        className="grid grid-cols-2 gap-4"
                                      >
                                        {[
                                          { value: 'DIÁRIO', label: 'Diário' },
                                          { value: 'SEMANAL', label: 'Semanal' },
                                          { value: 'MENSAL', label: 'Mensal' },
                                          { value: 'TRIMESTRAL', label: 'Trimestral' }
                                        ].map((option) => (
                                          <motion.div
                                            key={option.value}
                                            className={cn(
                                              "flex items-center p-4 border rounded-lg cursor-pointer transition-colors",
                                              formData.rebalanceFrequency === option.value
                                                ? "border-primary bg-primary/5"
                                                : "border-muted hover:border-primary/50"
                                            )}
                                            whileHover={{ scale: 1.02 }}
                                            whileTap={{ scale: 0.98 }}
                                            animate={{
                                              scale: formData.rebalanceFrequency === option.value ? 1.02 : 1,
                                              transition: { type: "spring", stiffness: 300, damping: 15 }
                                            }}
                                          >
                                            <RadioGroupItem value={option.value} id={`rebalance-${option.value}`} />
                                            <Label htmlFor={`rebalance-${option.value}`} className="ml-2">
                                              {option.label}
                                            </Label>
                                            {formData.rebalanceFrequency === option.value && (
                                              <motion.div
                                                className="ml-auto text-primary"
                                                initial={{ scale: 0 }}
                                                animate={{ scale: 1 }}
                                                transition={{ type: "spring", stiffness: 500, damping: 15 }}
                                              >
                                                <CheckCircle2 className="w-4 h-4" />
                                              </motion.div>
                                            )}
                                          </motion.div>
                                        ))}
                                      </RadioGroup>
                                    </div>

                                    <div className="flex items-center space-x-2">
                                      <Checkbox
                                        id="reinvestDividends"
                                        checked={formData.reinvestDividends}
                                        onCheckedChange={(checked) => 
                                          setFormData(prev => ({ ...prev, reinvestDividends: checked as boolean }))}
                                      />
                                      <label
                                        htmlFor="reinvestDividends"
                                        className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                                      >
                                        Reinvestir dividendos automaticamente
                                      </label>
                                    </div>

                                    <div className="space-y-4">
                                      <Label>Ativos Preferenciais</Label>
                                      <div className="flex flex-wrap gap-2">
                                        {['BTC', 'ETH', 'PETR4', 'VALE3', 'WEGE3'].map((asset) => (
                                          <Badge
                                            key={asset}
                                            variant="outline"
                                            className={cn(
                                              "cursor-pointer transition-colors",
                                              formData.preferredAssets.includes(asset)
                                                ? "bg-primary/20 border-primary"
                                                : "hover:border-primary"
                                            )}
                                            onClick={() => {
                                              setFormData(prev => ({
                                                ...prev,
                                                preferredAssets: prev.preferredAssets.includes(asset)
                                                  ? prev.preferredAssets.filter(a => a !== asset)
                                                  : [...prev.preferredAssets, asset]
                                              }));
                                            }}
                                          >
                                            <motion.div
                                              initial={false}
                                              animate={{
                                                scale: formData.preferredAssets.includes(asset) ? 1.1 : 1,
                                                transition: { type: "spring", stiffness: 500, damping: 15 }
                                              }}
                                            >
                                              {asset}
                                            </motion.div>
                                          </Badge>
                                        ))}
                                      </div>
                                      <p className="text-xs text-muted-foreground">
                                        Selecione os ativos que você tem preferência para incluir na carteira
                                      </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                            </motion.div>
                          )}

                          {step === 3 && (
                            <motion.div
                              key="step3"
                              initial={{ opacity: 0, x: 20 }}
                              animate={{ opacity: 1, x: 0 }}
                              exit={{ opacity: 0, x: -20 }}
                            >
                              <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
                                <CardHeader>
                                  <CardTitle>Resumo da Configuração</CardTitle>
                                  <CardDescription>
                                    Revise as configurações antes de gerar sua carteira
                                  </CardDescription>
                                </CardHeader>
                                <CardContent>
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div className="space-y-4">
                                      <div>
                                        <h3 className="font-medium mb-2">Perfil e Objetivos</h3>
                                        <div className="space-y-2">
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Perfil de Risco</span>
                                            <Badge variant="outline" className={getRiskColor(formData.riskLevel)}>
                                              {formData.riskLevel}
                                            </Badge>
                                          </div>
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Objetivo</span>
                                            <span>{formData.investmentGoal || 'Não definido'}</span>
                                          </div>
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Prazo</span>
                                            <span>{formData.investmentTerm} anos</span>
                                          </div>
                                        </div>
                                      </div>

                                      <div>
                                        <h3 className="font-medium mb-2">Parâmetros Financeiros</h3>
                                        <div className="space-y-2">
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Valor Inicial</span>
                                            <span>R$ {formData.initialAmount.toLocaleString()}</span>
                                          </div>
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Drawdown Máximo</span>
                                            <span>{formData.maxDrawdown}%</span>
                                          </div>
                          </div>
                        </div>
                  </div>

                  <div className="space-y-4">
                                      <div>
                                        <h3 className="font-medium mb-2">Alocação</h3>
                                        <div className="space-y-2">
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Criptomoedas</span>
                                            <span>{formData.cryptoAllocation}%</span>
                                          </div>
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Ações</span>
                                            <span>{formData.stocksAllocation}%</span>
                                          </div>
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Outros</span>
                                            <span>{100 - formData.cryptoAllocation - formData.stocksAllocation}%</span>
                                          </div>
                                        </div>
                    </div>

                        <div>
                                        <h3 className="font-medium mb-2">Configurações Avançadas</h3>
                                        <div className="space-y-2">
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Rebalanceamento</span>
                                            <span>{formData.rebalanceFrequency}</span>
                                          </div>
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Reinvestir Dividendos</span>
                                            <span>{formData.reinvestDividends ? 'Sim' : 'Não'}</span>
                          </div>
                                          <div className="flex justify-between">
                                            <span className="text-muted-foreground">Ativos Preferenciais</span>
                                            <div className="flex gap-1">
                                              {formData.preferredAssets.map((asset) => (
                                                <Badge key={asset} variant="outline" className="text-xs">
                                                  {asset}
                                                </Badge>
                                              ))}
                          </div>
                        </div>
                          </div>
                        </div>
                      </div>
                  </div>
                                </CardContent>
                              </Card>
                            </motion.div>
                          )}
                        </AnimatePresence>

                        <div className="flex items-center justify-between pt-4 border-t border-border/50">
                    <Button
                      variant="outline"
                            onClick={() => setStep(step > 1 ? step - 1 : 1)}
                            disabled={step === 1}
                            className="w-32"
                          >
                            ← Voltar
                          </Button>

                          <div className="flex items-center gap-2">
                            {step < 3 ? (
                              <Button 
                                onClick={() => setStep(step + 1)}
                                className="btn-glow w-32 bg-primary/90 hover:bg-primary/80 transition-all duration-300"
                              >
                                Próximo →
                              </Button>
                            ) : (
                              <Button 
                                onClick={handleGeneratePortfolio} 
                                className="btn-glow w-48 bg-gradient-to-r from-primary/90 to-primary/70 hover:from-primary/80 hover:to-primary/60"
                                disabled={loading}
                              >
                                {loading ? (
                                  <motion.div
                                    animate={{ rotate: 360 }}
                                    transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                                    className="mr-2"
                                  >
                                    <Sparkles className="h-4 w-4" />
                                  </motion.div>
                                ) : (
                                  <Sparkles className="h-4 w-4 mr-2" />
                                )}
                                {loading ? "Gerando carteira..." : "Gerar Carteira Otimizada"}
                    </Button>
                  )}
                          </div>
                        </div>
                </div>
              </CardContent>
            </Card>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </Layout>

      <Dialog open={showNameInput} onOpenChange={setShowNameInput}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Nomeie sua carteira</DialogTitle>
          </DialogHeader>
          <div className="p-4">
            <Input
              placeholder="Digite o nome da carteira"
              value={portfolioName}
              onChange={(e) => setPortfolioName(e.target.value)}
              className="mb-4"
            />
            <Button onClick={handleSavePortfolio} className="w-full">
              Salvar Carteira
            </Button>
      </div>
        </DialogContent>
      </Dialog>

      <Toaster />
    </>
  );
}

